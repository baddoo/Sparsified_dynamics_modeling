function [X_org,Y_org] = original_dynamics(X,Y,K,dt,nt)

%% Inputs
% X : initial x-cordinate of point vortices
% Y : initial x-cordinate of point vortices
% K : strength of point vortices
% dt : time step
% nt : number of time steps

%% Outputs
% X_org, Y_org: trajectories of vortices


%% Run biot-savart model
n          = length(X);
z0         = [X;Y];              % Array of co-ordinates/strengths
X_org      = zeros(n,nt+1);           % X-cordinate frames
Y_org      = zeros(n,nt+1);           % Y-cordinate frames
X_org(:,1) = X; 
Y_org(:,1) = Y;
tic
for m = 2:nt+1
    [~,z]         = ode45(@biot_savart,[0,dt],z0);
    x             = z(end,1:n)';
    y             = z(end,n+1:2*n)';
    X_org(:,m)    = x;
    Y_org(:,m)    = y;
    z0            = [x;y;K];
end
disp(['Old BS took ' num2str(toc)])
tic
sol = ode45(@biot_savart,[0,nt*dt],[X;Y]);
disp(['New BS took ' num2str(toc)])
Z_new = deval(sol,0:dt:dt*nt,[1:2*nt+1]);

function [dzdt] = biot_savart(~,z)
%% Biot-savart law

x = z(1:end/2); y = z(end/2+1:end);
dx = x - x.'; dy = y - y.';
r2 = dx.^2 + dy.^2;
BSmatX = dx./r2;
BSmatY = dx.
dxdt = -(dx./r2)*K/(2*pi);
dydt = -(dy./r2)*K/(2*pi);

dzdt = [dxdt;dydt];

% n     = length(z)/3;             
% x     = z(1:n);
% y     = z(n+1:2*n);
% kappa = z(2*n+1:end);  
% u     = zeros(size(x));
% v     = zeros(size(y));
% for j = 1:n
%     for k = 1:n
%         if (j~=k)
%             dx = x(j)-x(k);
%             dy = y(j)-y(k);
%             r2 = dx^2 + dy^2;
%             u(j) = u(j) + kappa(k)*dy/r2;
%             v(j) = v(j) + kappa(k)*dx/r2;
%         end
%     end
% end
% u      = -u/(2*pi);
% v      =  v/(2*pi);
% dkappa = zeros(size(x));
% dzdt   = [u;v;dkappa];